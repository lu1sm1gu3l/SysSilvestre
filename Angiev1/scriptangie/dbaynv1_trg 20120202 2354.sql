-- Script was generated by Devart dbForge Studio for MySQL, Version 4.50.285.0
-- Script date 02/02/2012 23:54:31
-- Server version: 5.1.35-community
-- Client version: 4.1

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Definition for database dbaynv1
--



-- 
-- Set default database
--
USE dbaynv1;

DELIMITER $$

--
-- Definition for trigger TRGINSComprobanteVentaEstado
--
  DROP TRIGGER IF EXISTS TRGINSComprobanteVentaEstado$
CREATE
	TRIGGER TRGINSComprobanteVentaEstado
	AFTER INSERT
	ON vtat08_comprobante_venta
	FOR EACH ROW
BEGIN
  declare usuario VARCHAR(100);
  set usuario=(select t03.Username from grlt03_usuario t03 where t03.IdUsuario=new.IdUsuario);
  insert into vtat14_comprobante_venta_estado (IdComprobanteVenta,IdEstado,Usuario,Fecha,Observacion)
  VALUES (NEW.IdComprobanteVenta,1,usuario,NOW(),null);
END
$$

--
-- Definition for trigger TRGINSSaldoAlmacen
--
DROP TRIGGER IF EXISTS TRGINSSaldoAlmacen$
CREATE 

TRIGGER TRGINSSaldoAlmacen
	BEFORE INSERT
	ON almt17_saldo_almacen
	FOR EACH ROW
BEGIN
  UPDATE almt09_almacen_producto
  SET
      UltimoIdSaldoAlmacen=new.IdSaldoAlmacen,
      UltimoFechaInicio=NEW.Fechafinal
  WHERE
      IdAlmacen=NEW.IdAlmacen AND
      IdProducto=new.IdProducto;
END
$$

--
-- Definition for trigger TRGUPDComprobanteDevolucion
--
DROP TRIGGER IF EXISTS TRGUPDComprobanteDevolucion;
CREATE 

TRIGGER TRGUPDComprobanteDevolucion
	AFTER UPDATE
	ON vtat26_comprobante_devolucion
	FOR EACH ROW
BEGIN
 DECLARE pIdCuentaCorriente INT;  

  IF new.UltimoIdEstado=4 THEN

        

       CALL CTBSPRINSCuentaCorriente(pIdCuentaCorriente,new.IdCliente,new.IdMoneda,0);
       CALL CTBSPRINSMovimientoCuenta(pIdCuentaCorriente,new.IdComprobanteDevolucion,8,2,
        new.NumeroComprobanteDevolucion,
        new.MontoTotalRedondeado,new.IdUsuario,
        new.IdEmpleado);

ELSE  IF new.UltimoIdEstado=1 THEN

  
      CALL CTBSPRINSCuentaCorriente(pIdCuentaCorriente,new.IdCliente,new.IdMoneda,0);
      CALL CTBSPRINSMovimientoCuenta(pIdCuentaCorriente,new.IdComprobanteDevolucion,5,1,
        new.NumeroComprobanteDevolucion,
        new.MontoTotal,new.IdUsuario,
        new.IdEmpleado);

        ELSE

           CALL CTBSPRINSCuentaCorriente(pIdCuentaCorriente,new.IdCliente,new.IdMoneda,0);
    
           CALL CTBSPRINSMovimientoCuenta(pIdCuentaCorriente,new.IdComprobanteDevolucion,5,2,
            new.NumeroComprobanteDevolucion,
            OLD.MontoTotalRedondeado,new.IdUsuario,
            new.IdEmpleado);
    
           CALL CTBSPRINSMovimientoCuenta(pIdCuentaCorriente,new.IdComprobanteDevolucion,5,1,
            new.NumeroComprobanteDevolucion,
            NEW.MontoTotalRedondeado,new.IdUsuario,
            new.IdEmpleado);
            END IF;
END IF;

END
$$

--
-- Definition for trigger TRGUPDCuentaCorriente
--
  DROP TRIGGER IF EXISTS TRGUPDCuentaCorriente;
CREATE 

TRIGGER TRGUPDCuentaCorriente
	AFTER INSERT
	ON ctbt03_movimiento_cuenta
	FOR EACH ROW
BEGIN
  if new.IdTipoTransaccion=1
    then
    update 
    ctbt02_cuenta_corriente t02
    set t02.Saldo=Saldo+new.Monto where t02.IdCuentaCorriente=new.IdCuentaCorriente;
  else
    update 
    ctbt02_cuenta_corriente t02
    set t02.Saldo=Saldo-new.Monto where t02.IdCuentaCorriente=new.IdCuentaCorriente;
  end if;
END
$$

--
-- Definition for trigger TRGUPDNotaCredito
--
  DROP TRIGGER IF EXISTS TRGUPDNotaCredito ;
CREATE 

TRIGGER TRGUPDNotaCredito
	AFTER UPDATE
	ON vtat17_nota_credito
	FOR EACH ROW
BEGIN

  
  DECLARE pIdCuentaCorriente INT; 

IF new.UltimoIdEstado=4 THEN
       

     CALL CTBSPRINSCuentaCorriente(pIdCuentaCorriente,new.IdCliente,new.IdMoneda,0);
      CALL CTBSPRINSMovimientoCuenta(pIdCuentaCorriente,new.IdNotaCredito,7,2,
        new.NumNotaCredito,
        new.MontoTotalRedondeado,new.IdUsuario,
        new.IdEmpleado);


ELSE if new.UltimoIdEstado=1 THEN

      CALL CTBSPRINSCuentaCorriente(pIdCuentaCorriente,new.IdCliente,new.IdMoneda,0);
      CALL CTBSPRINSMovimientoCuenta(pIdCuentaCorriente,new.IdNotaCredito,1,1,
        new.NumNotaCredito,
        new.MontoTotalRedondeado,new.UltimoIdUsuario,
        new.IdEmpleado);
    ELSE

      CALL CTBSPRINSCuentaCorriente(pIdCuentaCorriente,new.IdCliente,new.IdMoneda,0);
      CALL CTBSPRINSMovimientoCuenta(pIdCuentaCorriente,new.IdNotaCredito,1,2,
        new.NumNotaCredito,
        OLD.MontoTotalRedondeado,new.UltimoIdUsuario,
        new.IdEmpleado);

      CALL CTBSPRINSMovimientoCuenta(pIdCuentaCorriente,new.IdNotaCredito,1,1,
        new.NumNotaCredito,
        NEW.MontoTotalRedondeado,new.UltimoIdUsuario,
        new.IdEmpleado);

  END IF;
END IF;


        


END
$$

DELIMITER ;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;